<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LTRegistratorApi</name>
    </assembly>
    <members>
        <member name="T:LTRegistratorApi.Controllers.AccountController">
            <summary>
            The controller that is responsible for basic user operations.
            </summary>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AccountController.#ctor(LTRegistrator.BLL.Services.LTRegistratorDbContext,Microsoft.AspNetCore.Identity.UserManager{LTRegistrator.Domain.Entities.User},Microsoft.AspNetCore.Identity.SignInManager{LTRegistrator.Domain.Entities.User},Microsoft.Extensions.Configuration.IConfiguration)">
            <param name="userManager">Allows you to manage users</param>
            <param name="signInManager">Provides the APIs for user sign in</param>
            <param name="configuration">To use the file setting</param>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AccountController.Login(LoginDto)">
            <summary>
            POST api/account/login
            The method tries to authorize the user and return the JWT-token.
            </summary>
            <param name="model">LoginDto (user)</param>
            <returns>JWT-token</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AccountController.Register(RegisterDto)">
            <summary>
            The method attempts to register a user and return the JWT-token.
            </summary>
            <param name="model">User</param>
            <returns>JWT-token</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AccountController.GenerateJwtToken(LTRegistrator.Domain.Entities.User)">
            <summary>
            Method generates JWT-token for user.
            </summary>
            <param name="user">The ApplicationUser who has mail</param>
            <returns>JWT-token</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AdministratorController.UpdateProject(LTRegistratorApi.Model.ProjectDto,System.Int32)">
            <summary>
            updating project information
            PUT: api/Administrator/Project
            </summary>
            <param name="project">json {ProjectId, Name, projectEmployee}
            Name and projectEmployee not obligatory</param>
            <returns> "OK" or "not found"</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AdministratorController.SetManager(System.Int32,System.Int32)">
            <summary>
            method for assigning a project manager
            POST: api/Administrator/setmanager/{managerID}/project/{projectID}
            </summary>
            <param name="projectid">id of project</param>
            <param name="managerid">id of manager</param>
            <returns>"200 ok" or "404 not found"</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AdministratorController.DeleteManager(System.Int32)">
            <summary>
            method for removing the manager from the project
            DELETE: api/Administrator/DeleteManager/project/{projectId}
            </summary>
            <param name="projectid"> id of the project whose manager should be deleted</param>
            <returns>"200 ok" or "404 not found"</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.AdministratorController.SetRole(System.Int32,System.String)">
            <summary>
            Update role claim of user
            </summary>
            <param name="employeeid">id of user which should be assigned as employee</param>
            <param name="AssignedRole">role to be assigned to the employee</param>
            <response code="200">Claim updated</response>
            <response code="400">User cannot be assigned as employee</response>
            <response code="404">Cannot find user</response>
        </member>
        <member name="T:LTRegistratorApi.Controllers.EmployeeController">
            <summary>
            Controller providing basic employee operations
            </summary>
        </member>
        <member name="M:LTRegistratorApi.Controllers.EmployeeController.GetInfoAsync(System.Int32)">
            <summary>
            GET api/employee/info
            Sends this user information.
            </summary>
            <returns>Basic Employee information</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.EmployeeController.GetLeavesAsync(System.Int32)">
            <summary>
            GET api/employee/{id}/leaves
            Gets a list of all human leaves.
            </summary>
            <param name="id">UserId</param>
            <returns>User's leave list</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.EmployeeController.SetLeavesAsync(System.Int32,System.Collections.Generic.ICollection{LTRegistratorApi.Model.LeaveInputDto})">
            <summary>
            POST api/employee/{id}/leaves
            Add new leaves for user.
            </summary>
            <param name="id">UserId</param>
            <param name="leaves">List of LeaveDto that is added to the user</param>
            <returns>Was the operation successful?</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.EmployeeController.UpdateLeaves(System.Int32,System.Collections.Generic.List{LTRegistratorApi.Model.LeaveDto})">
            <summary>
            PUT api/employee/{id}/leaves
            Updates information on leaves.
            </summary>
            <param name="id">UserId</param>
            <param name="leaves">List of leaves that updated</param>
            <returns>Was the operation successful?</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LTRegistratorApi.Controllers.EmployeeController.DeleteLeave(System.Int32,System.Collections.Generic.List{System.Int32})" -->
        <member name="T:LTRegistratorApi.Controllers.ManagerController">
            <summary>
            The controller that provides managers functionality.
            </summary>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.GetManagerProjects(System.Int32)">
            <summary>
            GET api/manager/{EmployeeId}/projects
            Output of all projects of the manager. 
            </summary>
            <param name="employeeId">EmployeeId</param>
            <returns>Manager's projects list</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.AssignProjectToEmployee(System.Int32,System.Int32)">
            <summary>
            Post api/manager/project/{ProjectId}/assign/{EmployeeId} 
            Add a project to the employee.
            </summary>
            <param name="projectId">ProjectId</param>    
            <param name="employeeId">EmployeeId</param>
            <returns>Was the operation successful?</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.ReassignEmployeeFromProject(System.Int32,System.Int32)">
            <summary>
            DELETE api/manager/project/{projectId}/reassign/{EmployeeId}
            Delete employee from project.
            </summary>
            <param name="projectId">ProjectId</param>
            <param name="employeeId">EmployeeId</param>
            <returns>Was the operation successful?</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.GetEmployees(System.Int32,System.Int32)">
            <summary>
            Get api/manager/{EmployeeId}/project/{ProjectId}/employees
            Get employees in the project
            First the manager people are displayed, then the rest
            </summary>
            <param name="projectId">ProjectId</param>
            <param name="employeeId">EmployeeId of manager</param>
            <returns>Employee list</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.GetProjects">
            <summary>
            method for getting the the list of all projects
            GET: api/Manager/allprojects
            </summary>
            <returns>list of projects in json {ProjectId, Name}</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.AddProject(LTRegistratorApi.Model.ProjectDto)">
            <summary>
            adding a new project
            POST: api/Manager/project
            </summary>
            <param name="project">json {Name}</param>
            <returns>"201 created" and json {ProjectId, EmployeeId}</returns>
        </member>
        <member name="M:LTRegistratorApi.Controllers.ManagerController.DeleteProject(System.Int32)">
            <summary>
            deleting project by id
            DELETE: api/Manager/project/{id}
            </summary>
            <param name="id">id of project to be deleted</param>
            <returns>"200 ok" or "404 not found"</returns>
        </member>
        <member name="T:LTRegistratorApi.DbInitializer">
            <summary>
            Adding values ​​to a table.
            </summary>
        </member>
        <member name="T:LTRegistratorApi.Model.DtoConverter">
            <summary>
            Class with methods performing transformations with dto
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LTRegistratorApi.Model.DtoConverter.ToProject(System.Collections.Generic.List{LTRegistrator.Domain.Entities.ProjectEmployee})" -->
        <!-- Badly formed XML comment ignored for member "M:LTRegistratorApi.Model.DtoConverter.ToProjectDto(System.Collections.Generic.List{LTRegistrator.Domain.Entities.Project})" -->
        <!-- Badly formed XML comment ignored for member "M:LTRegistratorApi.Model.DtoConverter.ToEmployeeDto(System.Collections.Generic.List{LTRegistrator.Domain.Entities.Employee})" -->
        <member name="M:LTRegistratorApi.Model.DtoConverter.ToEmployeeDto(LTRegistrator.Domain.Entities.Employee)">
            <summary>
            Employee to EmployeeDto
            </summary>
            <returns>EmployeeDto, which contains basic information about the Employee</returns>
        </member>
        <member name="T:LTRegistratorApi.Model.EmployeeDto">
            <summary>
            Basic information about the employee.
            </summary>
        </member>
        <member name="T:LTRegistratorApi.Model.ProjectDto">
            <summary>
            Basic information about the project.
            </summary>
        </member>
        <member name="T:LoginDto">
            <summary>
            Data required for authorization.
            </summary>
        </member>
        <member name="T:RegisterDto">
            <summary>
            Data required during registration.
            </summary>
        </member>
    </members>
</doc>
